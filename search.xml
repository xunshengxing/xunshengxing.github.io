<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AOP切面编程</title>
      <link href="/2025/10/21/spring/AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
      <url>/2025/10/21/spring/AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC容器</title>
      <link href="/2025/10/21/spring/IOC%E5%AE%B9%E5%99%A8/"/>
      <url>/2025/10/21/spring/IOC%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="spring-Ioc容器和核心概念"><a href="#spring-Ioc容器和核心概念" class="headerlink" title="spring Ioc容器和核心概念"></a>spring Ioc容器和核心概念</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="https://secure2.wostatic.cn/static/8LSuy5YWXmufYmPWM894rN/image.png?auth_key=1761007795-r5HABMqadWCsN5MypZJerS-0-adf5b6db98d99f78b36b4e56a863f235&file_size=31162" alt="img"></p><p>SpringIoC 容器是Spring管理组件的容器，就是一个复杂容器，不仅存储组件，也可以管理组件之间依赖关系，并且创建和销毁组件等。</p><p><img src="https://secure2.wostatic.cn/static/mFt9PQ2ggCqB193CC57AKi/image.png?auth_key=1761008110-5heTVWax3rCnZUW6XzLpp3-0-b5e9d30d8198fa94754689c3f60b4c3a&file_size=11514" alt="img"></p><p>Spring IoC 容器，负责实例化、配置和组装 bean（组件）。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令</p><blockquote><p>一个springboot项目通常只有一个IOC容器（ApplicationContext），负责管理项目中所有的Bean、</p></blockquote><h3 id="容器具体接口和实现类"><a href="#容器具体接口和实现类" class="headerlink" title="容器具体接口和实现类"></a>容器具体接口和实现类</h3><p><code>BeanFactory</code>接口提供了一种高级配置机制，能够管理其他对象。</p><p><code>ApplicationContext</code>是<code>BeanFactory</code>的子接口</p><p><code>BeanFactory</code> 提供了配置框架和基本功能，而 <code>ApplicationContext</code> 添加了更多特定于企业的功能。 <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的完整超集！</p><p><strong>ApplicationContext容器实现类</strong>：</p><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td><code>ClassPathXmlApplicationContext</code></td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td><code>FileSystemXmlApplicationContext</code></td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td><code>AnnotationConfigApplicationContext</code></td><td>通过读取Java配置类创建 IOC 容器对象</td></tr><tr><td><code>WebApplicationContext</code></td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p><strong>IoC容器</strong></p><p>Spring IoC 容器，负责实例化、配置和组装 bean（组件）核心容器。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。</p></li><li><p><strong>IoC（Inversion of Control）控制反转</strong></p><p>IoC 主要是针对对象的创建和调用控制而言的，也就是说，当应用程序需要使用一个对象时，不再是应用程序直接创建该对象，而是由 IoC 容器来创建和管理，即控制权由应用程序转移到 IoC 容器中，也就是“反转”了控制权。这种方式基本上是通过依赖查找的方式来实现的，即 IoC 容器维护着构成应用程序的对象，并负责创建这些对象。</p></li><li><p><strong>DI (Dependency Injection) 依赖注入</strong></p><p>DI 是指在组件之间传递依赖关系的过程中，将依赖关系在容器内部进行处理，这样就不必在应用程序代码中硬编码对象之间的依赖关系，实现了对象之间的解耦合。在 Spring 中，DI 是通过 XML 配置文件或注解的方式实现的。它提供了三种形式的依赖注入：构造函数注入、Setter 方法注入和接口注入。</p></li></ul><h2 id="Spring-Ioc实践和应用"><a href="#Spring-Ioc实践和应用" class="headerlink" title="Spring Ioc实践和应用"></a>Spring Ioc实践和应用</h2><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><p><strong>1. 配置元数据</strong></p><p>编写交给SpringIoc容器管理组件的信息</p><ul><li><p><code>&lt;bean&gt;</code> 一个组件</p></li><li><p><code>id</code> 标识这个bean</p></li><li><p><code>class</code>定义Bean的类型（<span style="color:#FF0000;">使用完全限定的类名</span>）</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此处要添加一些约束，配置文件的标签并不是随意命名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> [<span class="attr">1</span>] <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> [<span class="attr">2</span>]&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.实例化Ioc容器</strong></p><p>选择一个合适的容器实现类，进行Ioc容器的实例化工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化ioc容器,读取外部配置文件,最终会在容器内进行ioc和di动作</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>3.获取Bean组件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建ioc容器对象，指定配置文件，ioc也开始实例组件对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取ioc容器的组件对象</span></span><br><span class="line"><span class="type">PetStoreService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;petStore&quot;</span>, PetStoreService.class);</span><br><span class="line"><span class="comment">//使用组件对象</span></span><br><span class="line">List&lt;String&gt; userList = service.getUsernameList();</span><br></pre></td></tr></table></figure><h3 id="基于XML配置方式组件管理"><a href="#基于XML配置方式组件管理" class="headerlink" title="基于XML配置方式组件管理"></a>基于XML配置方式组件管理</h3><p><img src="https://secure2.wostatic.cn/static/rMxd5wJzZ4WaVCyCt5Tazm/img006.png?auth_key=1761009668-qyc4jFXxB2Ypbv4xqdNGrA-0-873fcaf4232f095c2d96b0fadcb0672b&file_size=13315" alt="img"></p><p><strong>1.导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.无参构造函数</strong></p><p><strong>3.静态工厂方法实例化</strong></p><p><strong>4.实例工厂方法实例化</strong></p><p><img src="https://secure2.wostatic.cn/static/mpqqiD6Bmbno45SpRwBNom/image.png?auth_key=1761009926-9Jv2QXJuB12qEefUwppBqK-0-4266acccd4cee9c75374ab6487ebf9ce&file_size=154093" alt="img"></p><h3 id="基于注解方式管理Bean"><a href="#基于注解方式管理Bean" class="headerlink" title="基于注解方式管理Bean"></a>基于注解方式管理Bean</h3><h3 id="基于配置类方式管理Bean"><a href="#基于配置类方式管理Bean" class="headerlink" title="基于配置类方式管理Bean"></a>基于配置类方式管理Bean</h3><h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务01</title>
      <link href="/2025/10/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A101/"/>
      <url>/2025/10/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A101/</url>
      
        <content type="html"><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251020115429701.png" alt="image-20251020115429599"></p><p>拆分原则：单一职责</p><p>横向拆分：按功能模块拆</p><p>纵向拆分：抽取公共部分</p><p>微服务工程结构：</p><ul><li>完全解耦：每一个微服务都创建为一个独立的工程，甚至可以使用不同的开发语言来开发，项目完全解耦。<ul><li>优点：服务之间耦合度低</li><li>缺点：每个项目都有自己的独立仓库，管理起来比较麻烦</li></ul></li><li>Maven聚合：整个项目为一个Project，然后每个微服务是其中的一个Module<ul><li>优点：项目代码集中，管理和运维方便（授课也方便）</li><li>缺点：服务之间耦合，编译时间较长</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 黑马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做自己生活的掌控者</title>
      <link href="/2025/10/11/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91/"/>
      <url>/2025/10/11/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h1 id="抑郁症的底层逻辑"><a href="#抑郁症的底层逻辑" class="headerlink" title="抑郁症的底层逻辑"></a>抑郁症的底层逻辑</h1><h2 id="快思考与慢思考"><a href="#快思考与慢思考" class="headerlink" title="快思考与慢思考"></a>快思考与慢思考</h2><p>读<a href="https://www.bilibili.com/video/BV1czhvzaEAM/?spm_id_from=333.1387.homepage.video_card.click&vd_source=1028c1f113dbb99196af3bb971751263">一次连麦看懂抑郁症的底层逻辑！<em>哔哩哔哩</em></a></p><p>快思考：杏仁核</p><p>说的话很多，但是多是<span style="color:#FF0000;">情绪上的思考</span>，这个思考不是真正的思考。</p><p>慢思考：前额叶</p><p>是真正的理性思考</p><p>抑郁的原因：快思考逐步代替了慢思考，想的太多了，最开始的出发点不是因为想太多，都是因为有个什么事，但是能发展到这一步都是对这个事不停的想反复的想</p><p>问题的关键从一个什么事转变为为什么会不停的想反复的想，也即是因为快思考</p><p>如果思考方式变为理性导向</p><ol><li>一件事情出现，我该怎么解决。</li><li>一件事情结束，我该吸取什么教训，我以后应该怎么办？</li></ol><p>如果是这种思维方式不会想很久，这种思考状态下是在使用前额叶，前额</p><p>叶的思考会反过来作用杏仁核抑制情绪。</p><p>重复思考思考本质上还是一种不舒服的情绪让你开始思考</p><p>想出自己该怎么做之后去付诸行动，越付诸行动，那些事情带来的影响就会越小。</p><p>但是如果用快思考</p><p>你会一直沉浸在这种情绪里，我怎么折磨难受。这种情况下你不是在思考如何解决问题而是在情绪反刍。反反复复感受这种情绪加强这种情绪，就是在刺激你的杏仁核，越刺激杏仁核越带来更多的情绪，反过来就越去想，恶性循环。这种思考是强制思考，出不来，好几个小时，一天下来就在那里打转，也思考不出一个什么结果，情绪也越来越严重，长此以往，人就抑郁了。</p><p>最开始抑郁往往不是一件特别大的事，特别巨大的事，无从抗拒的事想也没用也只能接受，反而是中等大小或者小事，让你反复的想。</p><p>当你进行思考的时候，你要要求自己往解决问题的方向去思考，正念冥想，观察情绪从哪里来，为什么有这个情绪？这个情绪对我是好还是不好？</p><p>坚持6-8个月可以让前额叶增大，杏仁核减小</p><p>价值观念：</p><p>君子的价值观念：行有不得，反求诸己，出现什么情况，思考自己能做什么，自己是<span style="color:#FF0000;">主因</span>，哪里没做好，以后改善什么</p><p>小人求诸人：出现什么问题都去思考外界原因，不会自我反省，去找别人的毛病，环境的毛病你解决不了，你就肯定会陷入这种恶性循环。</p><p>很多人不承担责任，父母帮他承担了责任</p><p>人如果不担责任，人就失去了主体性，我是自己的因，我现在生活的状态我要负责，我负主责，环境只是次责。</p><p>小人抱怨环境，环境不能改变，把自己的生活归罪于环境，相当于自己的状态无法改变，这就是属于被环境掌控。</p><p>为什么这种思考会导致抑郁？</p><p>理性思考，自己是掌控自己生活，我可以改变，我可以变得更好</p><p>感性思考，生活别环境掌控，过去如何如何，环境如何如何，学校如何如何，这些东西无法改变，一直处于被掌控的状态</p><p>人的意义在于寻求掌控，人一但被掌控那也就完犊子了</p>]]></content>
      
      
      <categories>
          
          <category> 随便写写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王山水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql面试</title>
      <link href="/2025/10/02/java%E9%9D%A2%E8%AF%95/mysql%E9%9D%A2%E8%AF%95/"/>
      <url>/2025/10/02/java%E9%9D%A2%E8%AF%95/mysql%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="慢查询定位"><a href="#慢查询定位" class="headerlink" title="慢查询定位"></a>慢查询定位</h3><p>问：如何定义慢查询（页面加载过慢、接口压测响应时间过长）？</p><ul><li>聚合查询</li><li>多表查询</li><li>表数据量过大查询</li><li>深度分页查询</li></ul><p>方案一：</p><p>调式工具：Arthas</p><p>运维工具：Prometheus、Skywalking</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003135719048.png" alt="image-20251003135718973"></p><p>方案二：Mysql自带慢日志</p><p>慢查询日志记录了所有执行时间超过指定参数(long_query_time，单位：s，默认10秒)的所有SQL语句的日志</p><p>如果要开启慢查询日志，需要在Mysql的配置文件(&#x2F;etc&#x2F;my.cnf)中配置如下信息：</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003135927708.png" alt="image-20251003135927654"></p><p>配置完毕之后，通过以下指令重新启动Mysql服务器进行测试，查看慢日志文件中记录的信息</p><p>&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003140034772.png" alt="image-20251003140034715"></p><h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003140201025.png" alt="image-20251003140200983" style="zoom: 90%;" /><h4 id="一个SQL语句执行很慢，如何分析"><a href="#一个SQL语句执行很慢，如何分析" class="headerlink" title="一个SQL语句执行很慢，如何分析?"></a><span style="color:#CC0000;">一个SQL语句执<span style="color:#CC0000;">行很慢，如何分析</span>?</span></h4><p>使用explain或者desc命令获取mysql如何执行select语句的信息</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003140329612.png" alt="image-20251003140329528"></p><ul><li><p>possible_key  当前SQL可能使用到的索引</p></li><li><p>key 当前SQL实际命中的索引</p></li><li><p>key_len 索引占用的大小</p></li><li><p>Extra 额外的优化建议</p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003140433810.png" alt="image-20251003140433762" style="zoom: 80%;" /></li><li><p>type 这条SQL的丽娜姐的类型，性能由好到差为NULL,system,const,eq_ref,ref,range,index,all</p><ul><li>const：根据主键查询</li><li>eq_ref：主键索引查询或唯一索引查询</li><li>ref：索引查询</li><li>range：范围查询</li><li>index：索引树扫描</li><li>all：全盘扫描</li></ul></li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引是帮助mysql高效获取数据的数据结构，B+树结构</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003141744135.png" alt="image-20251003141744069"></p><p>b树每隔节点可以有多个分支，以一颗最大度数为5的b树为例，那这个b树每隔节点最多存储4个key</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003141838131.png" alt="image-20251003141838078"></p><p>b+树是b树的优化，使其更适合外存储索引结构，</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003142158157.png" alt="image-20251003142158076"></p><ol><li>磁盘读写代价更低，非叶子节点不存储数据只存储指针</li><li>查询效率更加稳定，阶数更多，路径更短</li><li>便于扫库和区间查询，叶子节点之间是一个双向链表</li></ol><h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚簇索引</td><td>将数据存储和索引放到一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引</td><td>将数据和索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>聚簇索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一索引作为聚集索引</li><li>以上都没有，innoDB会自动生成一个rowid作为隐藏的聚集索引</li></ul><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003143157466.png" alt="image-20251003143157382"></p><h4 id="回表查询"><a href="#回表查询" class="headerlink" title="回表查询"></a>回表查询</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003143312141.png" alt="image-20251003143312009"></p><p>通过二级索引找到对应的主键值，到聚集索引中查找整行数据，这个过程就是回表</p><h3 id="覆盖索引、超大分页优化"><a href="#覆盖索引、超大分页优化" class="headerlink" title="覆盖索引、超大分页优化"></a>覆盖索引、超大分页优化</h3><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>覆盖索引是指查询使用了索引、并且需要返回的列，在该索引中已经全部能够找到，无需回表查询</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003143648020.png" alt="image-20251003143647952"></p><ul><li>如果使用id查询，直接走聚集索引查询，一次索引扫描，直接返回数据，性能高</li><li>如果返回的列中没有创建索引，有可能会触发回表查询，尽量避免使用select *</li></ul><h4 id="超大分页处理"><a href="#超大分页处理" class="headerlink" title="超大分页处理"></a>超大分页处理</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003143922299.png" alt="image-20251003143922219"></p><p>解决方案：覆盖分页+子查询</p><p>先</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003144045349.png" alt="image-20251003144045288"></p><h3 id="索引创建的原则"><a href="#索引创建的原则" class="headerlink" title="索引创建的原则"></a>索引创建的原则</h3><p>1）针对数据量较大，且查询比较频繁的表建立索引。<span style="color:#CC0000;">单表超过10万数据</span></p><p>2）针对常作为查询条件、排序、分组操作的字段建立索引</p><p>3）尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，索引效率越高</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003144531162.png" alt="image-20251003144531100"></p><p>4）如果是字符类型的字段，字段的长度较长，可以针对字段的特点，建立前缀索引</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003144624455.png" alt="image-20251003144624371"></p><p>5）尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省空间，避免回表<img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003144735448.png" alt="image-20251003144735383"></p><p>6）索引的数量需要控制</p><p>7）如果索引不能存储NULL值，一开始约束要加上NOT NULL</p><h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003144932903.png" alt="image-20251003144932823"></p><p>正常情况</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003145320955.png" alt="image-20251003145320883"></p><p>1）违反最左前缀法则</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003145141669.png" alt="image-20251003145141586"></p><p>2）范围查询右边的列，不能使用索引</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003145217426.png" alt="image-20251003145217349"></p><p>3）在索引列上进行运算操作，索引将失效</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003145351765.png" alt="image-20251003145351685"></p><p>4）字符串不加单引号，mysql自动进行类型转换</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003145433601.png" alt="image-20251003145433509"></p><p>5）模糊查询可能导致索引失效，头部模糊匹配，索引失效</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003145531312.png" alt="image-20251003145531232"></p><h3 id="SQL优化经验"><a href="#SQL优化经验" class="headerlink" title="SQL优化经验"></a>SQL优化经验</h3><ul><li><p>表的设计优化</p><ol><li>设置合适数值</li><li>设置合适的字符串类型</li></ol></li><li><p>索引优化</p></li><li><p>SQL语句优化</p><ol><li>避免使用select *</li><li>避免使用索引失效</li><li>尽量用union all代替union  union会多一次过滤</li><li>避免在where子句中对字段进行表达式操作</li><li><span style="color:#CC0000;">能用inner join就不用left join right join。如必须使用 一定要以小表为驱动</span></li></ol></li><li><p>主从复制，读写分离</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003150618079.png" alt="image-20251003150618015"></p></li><li><p>分库分表</p></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003150823013.png" alt="image-20251003150822929"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003150833491.png" alt="image-20251003150833432"></p><h3 id="事务并发问题、隔离级别"><a href="#事务并发问题、隔离级别" class="headerlink" title="事务并发问题、隔离级别"></a>事务并发问题、隔离级别</h3><h4 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003151006607.png" alt="image-20251003151006545"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003151131325.png" alt="image-20251003151131262"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003151158919.png" alt="image-20251003151158852"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003151307998.png" alt="image-20251003151307941"></p><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003151405998.png" alt="image-20251003151405933"></p><h3 id="undo-log-和redo-log的区别"><a href="#undo-log-和redo-log的区别" class="headerlink" title="undo log 和redo log的区别"></a>undo log 和redo log的区别</h3><ul><li>缓冲池：主内存的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），以一定频率刷新到磁盘。</li><li>数据页：是InnoDB存储引擎磁盘管理的最小单元，每个页的大小默认为16KB。页中存储的是行数据</li></ul><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251003154811716.png" alt="image-20251003154811660"></p>]]></content>
      
      
      <categories>
          
          <category> java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog操作</title>
      <link href="/2025/09/30/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/blog%E6%93%8D%E4%BD%9C/"/>
      <url>/2025/09/30/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/blog%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="涉及分类卡片（暂不使用）"><a href="#涉及分类卡片（暂不使用）" class="headerlink" title="涉及分类卡片（暂不使用）"></a>涉及分类卡片（暂不使用）</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-categories-card</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/a9131002/</span></span><br><span class="line"><span class="attr">categoryBar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/categories/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">column:</span> <span class="string">odd</span> <span class="comment"># odd：3列 | even：4列</span></span><br><span class="line">  <span class="attr">row:</span> <span class="number">1</span> <span class="comment">#显示行数，默认两行，超过行数切换为滚动显示</span></span><br><span class="line">  <span class="attr">message:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">java面试</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/202509270104151.jpg</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">/categories/java面试/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">博客搭建</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/202509270104152.jpg</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">/categories/博客搭建/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">随便写写</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/202509270104156.jpg</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">/categories/随便写写/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">其他</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">/img/fengmian8.jpg</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-categories-card@1.0.0/lib/categorybar.css</span></span><br></pre></td></tr></table></figure><h2 id="首页分类标签-现在使用"><a href="#首页分类标签-现在使用" class="headerlink" title="首页分类标签(现在使用)"></a>首页分类标签(现在使用)</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">magnet:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line">  <span class="attr">devide:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">随便写写</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">随便</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">📚</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">java面试</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">java面试八股</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">🎮</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">博客搭建</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">Hexo博客搭建</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">🐱‍👓</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">vue</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">小冰の编程学习</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">👩‍💻</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">学习</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">小冰の读书笔记</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">📒</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">随想</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">小冰の胡思乱想</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">💡</span></span><br><span class="line">  <span class="attr">color_setting:</span></span><br><span class="line">    <span class="attr">text_color:</span> <span class="string">black</span></span><br><span class="line">    <span class="attr">text_hover_color:</span> <span class="string">white</span></span><br><span class="line">    <span class="attr">background_color:</span> <span class="string">&quot;#f2f2f2&quot;</span></span><br><span class="line">    <span class="attr">background_hover_color:</span> <span class="string">&quot;#b30070&quot;</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">temple_html:</span> <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height: auto&quot;&gt;&lt;div id=&quot;catalog_magnet&quot;&gt;$&#123;temple_html_item&#125;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  <span class="attr">plus_style:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="预处理格式"><a href="#预处理格式" class="headerlink" title="预处理格式"></a>预处理格式</h2><h3 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:  必需 </span><br><span class="line">date:   必须</span><br><span class="line">updated:  可选</span><br><span class="line">type:   必需</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">aside:   显示侧边栏</span><br><span class="line">aplayer:   是否加载</span><br><span class="line">highlight_shrink:  配置代码框是否展开</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>前往你的 Hexo 的根目录</p></li><li><p>输入 <code>hexo new page tags</code> </p></li><li><p>你会找到 <code>source/tags/index.md</code> 这个文件</p></li><li><p>修改这个文件</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: &#x27;tags&#x27;</span><br><span class="line">orderby: random</span><br><span class="line"><span class="section">order: 1</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="文章配置"><a href="#文章配置" class="headerlink" title="文章配置"></a>文章配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img: 文章顶部图</span><br><span class="line">cover:   文章缩略图</span><br><span class="line">toc:     目录</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:  toc简洁模式</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis面试题</title>
      <link href="/2025/09/26/java%E9%9D%A2%E8%AF%95/Redis/"/>
      <url>/2025/09/26/java%E9%9D%A2%E8%AF%95/Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis-使用场景"><a href="#Redis-使用场景" class="headerlink" title="Redis 使用场景"></a>Redis 使用场景</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>查询一个不存在的数据，Mysql 查询不到数据也不会直接写入缓存，就会导致每次请求都查数据库</p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/202509261921325.png" alt="image-20250926192114283" style="zoom: 90%;" /><p>方案二：</p><p>布隆过滤器</p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/202509261921233.png" alt="image-20250926192150185" style="zoom: 75%;" /><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/202509261922862.png" alt="image-20250926192250804"></p><p>实现方案：</p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/202509261924088.png" alt="image-20250926192428047" style="zoom: 85%;" /><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>在 Redis 一个 key 过期的临界点，发送来大量请求，会压垮 DB</p><h5 id="互斥锁解决"><a href="#互斥锁解决" class="headerlink" title="互斥锁解决"></a>互斥锁解决</h5><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/202509261929456.png" title="" alt="image-20250926192932414" width="276"><p>保证数据的强一致性，但性能差</p><h5 id="逻辑过期"><a href="#逻辑过期" class="headerlink" title="逻辑过期"></a>逻辑过期</h5><img title="" src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/202509261931125.png" alt="image-20250926193133076" style="zoom: 80%;" width="482"><p>优先保证高可用，性能优</p><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>同一时段大量的缓存 key 同时失效或者 Redis 服务宕机，导致大量请求到达数据库</p><img title="" src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/202509261934517.png" alt="image-20250926193410459" style="zoom: 75%;" width="661"><h3 id="双写一致性"><a href="#双写一致性" class="headerlink" title="双写一致性"></a>双写一致性</h3><p>当修改了数据库的数据也要同时更新缓存的数据，缓存和数据库的数据要保持一致</p><h4 id="一致性要求高"><a href="#一致性要求高" class="headerlink" title="一致性要求高"></a>一致性要求高</h4><img title="" src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251001110715961.png" alt="image-20251001110708861" style="zoom: 80%;" width="672"><ul><li>读操作：缓存命中直接返回，缓存未命中查询数据库，写入缓存，设定超时时间</li><li>写操作：<span style="color:#CC0000;">延迟双删</span></li></ul><img title="" src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251001110816853.png" alt="image-20251001110816825" style="zoom: 85%;" width="702"><p>先删除缓存，再操作数据库</p><p>正常流程                                             脏数据</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251001111228497.png" title="" alt="image-20251001111228458" width="229" style="zoom:105%;"   > <img title="" src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251001111239223.png" alt="image-20251001111239189" width="197" style="zoom: 110%;"></p><p>先操作数据库，再删除缓存</p><p>正常流程                                        脏数据</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002133901630.png" alt="image-20251002133854531" style="zoom: 50%;" /> <img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002133938515.png" alt="image-20251002133938440" style="zoom: 50%;" /></p><ul><li>为什么要删除两次缓存：避免脏数据</li><li>为什么要延时删除？</li></ul><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002134146246.png" alt="image-20251002134146173" style="zoom: 80%;" /><p>一般情况下数据库是主从模式，读写分离，需要延时一会让主节点把数据同步到从节点，依旧有脏数据的风险</p><h4 id="强一致性"><a href="#强一致性" class="headerlink" title="强一致性"></a>强一致性</h4><p>如果要保证强一致性，分布式锁</p><p>一般放入缓存中的数据都是<span style="color:#CC0000;">读多写少</span></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002134355762.png" alt="image-20251002134355712" style="zoom: 65%;" /> <img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002134448461.png" alt="image-20251002134448410" style="zoom: 65%;" /></p><h4 id="弱一致性"><a href="#弱一致性" class="headerlink" title="弱一致性"></a>弱一致性</h4><ol><li>异步通知保证数据的最终一致性</li></ol><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002134638230.png" alt="image-20251002134638167"></p><ol start="2"><li>基于 Canal 的异步通知</li></ol><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002134813847.png" alt="image-20251002134750064"></p><p><code>二进制日志（BINLOG）记录了所有的DDL语句和DML语句，但不包括是数据查询语句</code></p><h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><p>Redis 中提供了两种数据持久化的方式，：1、RDB 2、AOF</p><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>RDB 全程 Redis 数据备份文件，简单来说就是把内存中所有数据记录到磁盘中。当 Redis 实例出现故障重启后，从磁盘中读取快照文件、恢复数据</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002135505910.png" alt="image-20251002135505805"></p><p>Redis 内部有自动执行 RDB 的机制，在 redis.config 文件中</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002135612377.png" alt="image-20251002135612314"></p><h5 id="RDB-的执行原理"><a href="#RDB-的执行原理" class="headerlink" title="RDB 的执行原理"></a>RDB 的执行原理</h5><p>bgsave 开始时会 fork 主进程得到子进程，子进程共享主进程的内存数据。完成 fork 后读取内存数据并写入 RDB 文件</p><p>fork 采用的是 copy-on-write 技术</p><ul><li>当主进程执行读操作时，访问共享内存</li><li>当主进程执行写操作时，则会拷贝一份数据，执行写操作，然后页面修改映射到新的数据</li></ul><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002135947312.png" alt="image-20251002135947245"></p><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>AOF 全称为 Append Only File（追加文件）。Redis 处理的每一个写命令都会记录在 AOF 文件，可以看做是命令日志文件。</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002140707052.png" alt="image-20251002140706990"></p><p>AOF 默认是关闭的，需要修改 redis.conf 配置文件来开启 AOF</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002140809916.png" alt="image-20251002140809868"></p><p>AOF 的命令记录的频率夜可以通过 redis.conf 文件来配</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002140818033.png" alt="image-20251002140817974"></p><p>缺点</p><p>因为是记录命令，AOF 文件比 RDB 文件要大的多。而且 AOF 会记录对同一个记录的多次写操作，但只有最后一次写操作才有意义。通过执行 bgrewriteaof 命令，可以让 AOF 文件执行重写功能，用最少的命令达到相同效果</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002141120458.png" alt="image-20251002141120411"></p><p>Redis 也会在触发阈值时自动去重写 AOF 文件。阈值也可以在 conf 中配置</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002141201414.png" alt="image-20251002141201351"></p><h4 id="RDB-与-AOF-对比"><a href="#RDB-与-AOF-对比" class="headerlink" title="RDB 与 AOF 对比"></a>RDB 与 AOF 对比</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002141403510.png" alt="image-20251002141403446"></p><h3 id="数据过期策略"><a href="#数据过期策略" class="headerlink" title="数据过期策略"></a>数据过期策略</h3><p>Redis对数据设置数据的有效时间，数据过期以后，就需要将数据从内存中删除掉。可以按照不同的规则进行删除，这种删除规则就称为数据的删除策略</p><h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><p>设置key之后，只有在用到该key时，才检查是否过期。过期就删除，反之返回key</p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002141814195.png" alt="image-20251002141814127" style="zoom: 75%;" /><p>优：对CPU友好，很多用不到的key不用浪费时间进行过期检查</p><p>缺：对内存不友好，如果一个key过期却没有使用，会一直存在内存中</p><h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h4><p>定期删除：每隔一段时间对<span style="color:#FF0000;">一些</span>key进行检查，从一定数量的数据库中取出一定数量的随机key进行处理</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002142254663.png" alt="image-20251002142254604"></p><h3 id="数据淘汰策略"><a href="#数据淘汰策略" class="headerlink" title="数据淘汰策略"></a>数据淘汰策略</h3><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002142411952.png" alt="image-20251002142411869"></p><p>LRU：最近最少使用</p><p>LFU：最少频率使用</p><h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002142549365.png" alt="image-20251002142549277"></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>redis分布式锁，是如何实现的？</p><h4 id="抢券场景"><a href="#抢券场景" class="headerlink" title="抢券场景"></a>抢券场景</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002142849058.png" alt="image-20251002142848985"></p><p>超卖问题</p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002142940648.png" alt="image-20251002142940588" style="zoom: 65%;" /><p>单体服务解决方案：</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002143026686.png" alt="image-20251002143026597"></p><p>在多个服务器上不能使用本地锁，本地锁是基于每个服务器的，这个时候需要使用外部的分布式锁</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002143152388.png" alt="image-20251002143152290"></p><p>分布式锁</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002143232043.png" alt="image-20251002143231939"></p><h4 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h4><p>Redis实现分布式锁主要利用Redis的setnx命令，setnx是SET if not exists的简写</p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002143336686.png" alt="image-20251002143336630" style="zoom: 85%;" /><p>如果不设置超时时间会出现死锁的问题</p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002143418352.png" alt="image-20251002143418287" style="zoom: 80%;" /><p>Redis实现分布式锁如何合理的控制锁的有效时长</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002143529352.png" alt="image-20251002143529292"></p><h4 id="Redis分布式锁执行流程"><a href="#Redis分布式锁执行流程" class="headerlink" title="Redis分布式锁执行流程"></a>Redis分布式锁执行流程</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002143708877.png" alt="image-20251002143708806"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisLock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//获取锁，执行锁的名称</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClinet.getLock(<span class="string">&quot;heimalock&quot;</span>);</span><br><span class="line">    <span class="comment">//尝试获取锁，参数分别是：获取锁的最大等待时间（期间会重试），锁自动释放时间</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//判断是否获取成功</span></span><br><span class="line">    <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sout(<span class="string">&quot;执行业务&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Watch dog给锁续期，默认是每隔10秒续期一次</li><li>抢不到锁的线程会自动重试</li><li>加锁、设置过期时间都是基于<span style="color:#CC0000;">lua</span>脚本命令完成，保证操作的原子性</li></ul><h4 id="分布式锁-可重入"><a href="#分布式锁-可重入" class="headerlink" title="分布式锁-可重入"></a>分布式锁-可重入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClinet.getLock(<span class="string">&quot;heimalock&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line"><span class="comment">//执行业务</span></span><br><span class="line">    add2();</span><br><span class="line">    <span class="comment">//释放锁</span></span><br><span class="line">    lock.unlock();</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClinet.getLock(<span class="string">&quot;heimalock&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line"><span class="comment">//执行业务</span></span><br><span class="line">    <span class="comment">//释放锁</span></span><br><span class="line">    lock.unlock();</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002144706850.png" alt="image-20251002144706776" style="zoom: 90%;" />可以重入，多个锁重入需要判断是否是当前线程</p><h4 id="主从一致性"><a href="#主从一致性" class="headerlink" title="主从一致性"></a>主从一致性</h4><p>主节点主要负责写数据，从节点主要负责读操作，当主节点发生写操作后会将数据同步到从节点</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002145059649.png" alt="image-20251002145059575"></p><p>主节点在获取锁后宕机了，还没有同步数据，一个从节点成为主节点，因为之前的数据没有同步过来，所以从节点也能获取到同一把锁，出现两个线程持有同一把锁，锁失去了互斥性</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002144808103.png" alt="image-20251002144808012"></p><p>RedLock（红锁）：不能只在一个redis实例上创建锁，应该在多个redis实例上创建锁(n&#x2F;2+1)，避免在一个redis实例上枷锁</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002145407992.png" alt="image-20251002145407911"></p><h3 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h3><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><p>单节点Redis的并发能力上限有限，就需要搭建主从集群，实现读写分离。一般都是一主多从，主节点负责写数据，从节点负责读数据</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002151700726.png" alt="image-20251002151700654"></p><h5 id="主从数据同步原理"><a href="#主从数据同步原理" class="headerlink" title="主从数据同步原理"></a>主从数据同步原理</h5><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002151811639.png" alt="image-20251002151811560"></p><ol><li>从节点请求主节点同步数据（replid,offset）</li><li>主节点判断是否是第一次请求，是第一次就与从节点更新版本信息</li><li>主节点执行bgsave，生成rdb文件后，发送给从节点去执行</li><li>在rdb生成执行期间，主节点会以命令的方式记录到缓冲区（一个日志文件）</li><li>把生成之后的命令日志文件发送给从节点进行同步</li></ol><p><span style="color:#CC0000;">Replication Id</span>：简称replid，是数据集的标记，id一致则说明是同一个数据集。每一个master都有唯一的replid，slave则会继承master节点的replid</p><p><span style="color:#CC0000;">offset</span>：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新</p><p>问题一：主节点如何判断是否是第一次同步？</p><p>问题二：之后的同步需要读取多少数据？</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002152514462.png" alt="image-20251002152514379"></p><ol><li>从节点请求主节点同步数据，主节点判断是不是第一次请求，不是第一次就获取offset值</li><li>主节点从命令日志中获取offset值之后的数据，发送给从节点进行数据同步</li></ol><h4 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h4><p>为了保证主从集群的高可用方式，哨兵模式来实现主从集群的自动故障恢复</p><ul><li><span style="font-weight:bold;">监控</span>：Sentinel会不断检查您的master和slave是否按预期工作</li><li><span style="font-weight:bold;">自动故障恢复</span>：如果master故障，Sentinel会自动将一个slave提升为master。当故障实例恢复后也以新的master为主</li><li><span style="font-weight:bold;">通知</span>：Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端</li></ul><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002153459282.png" alt="image-20251002153459217" style="zoom: 75%;" /><h5 id="服务状态监控"><a href="#服务状态监控" class="headerlink" title="服务状态监控"></a>服务状态监控</h5><p>Sentinel基于心跳机制监测服务状态，每隔1s向集群的每隔实例发送ping命令</p><ul><li>主观下线：如果某实例未在规定时间响应，则认为该实例主观下线</li><li>客观下线：超过指定数量的sentinel都认为该实例主观下线，则该实例客观下线</li></ul><p>哨兵选主规则</p><ul><li>首先判断主从节点断开时间长短，超过一定值排除</li><li>然后判断slave-priority值，越小优先级越高</li><li>然后判断slave节点的offset值，越大优先级越高</li><li>最后判断slave接待你运行id大小，越小有限级越高</li></ul><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002153944778.png" alt="image-20251002153944705" style="zoom: 70%;" /><h5 id="脑裂问题"><a href="#脑裂问题" class="headerlink" title="脑裂问题"></a>脑裂问题</h5><p>如果因为网络原因导致Sentinel认为主节点下线，选择一个从节点作为新的主节点，但是老的主节点客户端还在正常连接老的master。</p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002154304066.png" alt="image-20251002154303977" style="zoom: 50%;" /><p>后面网络恢复后，老的主节点会清空自己数据并同步新主节点的数据导致数据丢失的问题。</p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002154330012.png" alt="image-20251002154329931" style="zoom: 55%;" /><p>解决：redis有两个配置参数：</p><p>min-replicas-to-write 1 表示最少的salve节点为1个</p><p>min-replicas-max-lag   5  表示数据复制和同步的延迟不能超过5秒</p><p>通过修改这两个配置，设置最少的从节点数量以及缩短主从数据同步的延迟时间，达不到要求就拒绝请求，就可以避免大量的数据丢失</p><h4 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h4><p>主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：</p><ul><li>海量数据存储问题</li><li>高可用写的问题</li></ul><p>使用分片集群可以解决上诉问题，分片集群特征：</p><ul><li>集群中有多个master，每个master保存不同数据</li><li>每隔master都可以有多个slave节点</li><li>master之间通过ping检测彼此健康状态</li><li>客户端请求可以访问集群任意节点，最终都会被转发到正确节点<img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002155117498.png" alt="image-20251002155117430" style="zoom: 65%;" /></li></ul><h5 id="集群结构-数据读写"><a href="#集群结构-数据读写" class="headerlink" title="集群结构-数据读写"></a>集群结构-数据读写</h5><p>Redis分片集群引入了哈希槽的概念，Redis集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每隔节点负责一部分hash槽</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002155426116.png" alt="image-20251002155426027"></p><h3 id="Redis单线程"><a href="#Redis单线程" class="headerlink" title="Redis单线程"></a>Redis单线程</h3><ol><li>Redis单线程，但是为什么还那么快？</li></ol><ul><li>Redis是纯内存操作，执行速度非常快</li><li>采用单线程，避免不必要的上下文切换可竞争条件，多线程还要考虑线程安全问题</li><li>使用I&#x2F;O多路复用模型，非阻塞IO</li></ul><ol start="2"><li>能解释一个I&#x2F;O多路复用模型？</li></ol><p>Redis是纯内存操作，执行速度非常快，性能瓶颈是网络延迟而不是执行速度，I&#x2F;O多路复用模型主要就是实现了高效的网络请求</p><h4 id="用户空间和内核空间"><a href="#用户空间和内核空间" class="headerlink" title="用户空间和内核空间"></a>用户空间和内核空间</h4><ul><li>LInux系统中一个进程使用的内存情况划分为两部分：内核空间、用户空间</li><li>用户空间只能执行受限的命令（Ring3），而且不能直接调用系统资源，必需通过内核提供的接口来访问</li><li>内核空间可以执行特权命令（Ring0），调用一切系统资源</li></ul><p>Linux系统为了提高IO效率，会在用户空间和内核空间都加入缓冲区</p><ul><li>写数据时，要把用户缓冲数据拷贝到内核缓冲区，然后写入设备</li><li>读数据时，要从设备读取数据到内核缓冲区，然后拷贝到用户缓冲区</li></ul><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002180915197.png" alt="image-20251002180915127"></p><h4 id="常见的IO模型"><a href="#常见的IO模型" class="headerlink" title="常见的IO模型"></a>常见的IO模型</h4><h5 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h5><p>阻塞IO就是两个阶段都必需阻塞等待</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002181223889.png" alt="image-20251002181223800"></p><h5 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h5><p>非阻塞的IO的recvfrom操作会立即返回结果而不是阻塞用户进程</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002181319133.png" alt="image-20251002181319042"></p><h5 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h5><p>利用多个线程来同时监听多个Socket，并在某个Socket可读，可写时得到通知，从而避免无效的等待</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002181439305.png" alt="image-20251002181439216"></p><h4 id="Redis网络模型"><a href="#Redis网络模型" class="headerlink" title="Redis网络模型"></a>Redis网络模型</h4><p>Redis通过IO多路复用来提高网络性能</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002181937315.png" alt="image-20251002181937230"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251002182103892.png" alt="image-20251002182103802"></p>]]></content>
      
      
      <categories>
          
          <category> java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2025/09/26/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/git/"/>
      <url>/2025/09/26/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/git/</url>
      
        <content type="html"><![CDATA[<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>版本控制工具</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h4><p>版本：软件版本、文件版本</p><p>版本控制：</p><ol><li>保存和管理文件</li><li>提供客户端工具进行访问</li><li>提供不同版本文件比对功能</li></ol><h4 id="集中式版本控制"><a href="#集中式版本控制" class="headerlink" title="集中式版本控制"></a>集中式版本控制</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20250929152218914.png" alt="image-20250929152218880"></p><p>问题：</p><ol><li>文件冲突问题，多人同时下载修改后上传，后面的人上传文件会把前面的人所作的修改覆盖，VSS解决策略：加锁 ；CVS：不同用户修改区域不同，比如张三写第一行，李四写第二行；</li><li>中央服务器存在隐患</li></ol><h4 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a>分布式版本控制</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20250929152934661.png" alt="image-20250929152934625"></p><p>在本地搭建一个一样的资源库</p><h4 id="多人协作开发"><a href="#多人协作开发" class="headerlink" title="多人协作开发"></a>多人协作开发</h4>]]></content>
      
      
      <categories>
          
          <category> 随便写写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客添加音乐组件</title>
      <link href="/2025/09/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Bufferfly%20Blog%20%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/09/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Bufferfly%20Blog%20%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Bufferfly-Blog-配置"><a href="#Bufferfly-Blog-配置" class="headerlink" title="Bufferfly Blog 配置"></a>Bufferfly Blog 配置</h1><h2 id="添加音乐组件"><a href="#添加音乐组件" class="headerlink" title="添加音乐组件"></a>添加音乐组件</h2><p>这里选择的解决方案，Aplayer + meting </p><ol><li><p>首先下载包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br><span class="line"></span><br><span class="line">npm install meting@2.0.1 --save</span><br></pre></td></tr></table></figure></li><li><p>将dist中的文件加入到主题的source路径下</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/202509232252561.png" alt="image-20250923225202494"></p></li><li><p>修改配置文件</p><ul><li><p>主题配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="string">aplayer</span>   <span class="comment">#开启音乐播放器</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="literal">true</span>    <span class="comment">#每个页面都有Aplayer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现不会因跳转其他页面而重新播放音乐</span></span><br><span class="line"><span class="attr">pjax:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>根配置文件hexo配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全局音乐 需要将asset_inject设置成false</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line"><span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>引用播放器</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/dist/Aplayer.min.css&quot;&gt;</span>  <span class="string">&lt;!--</span> <span class="string">路径修正</span> <span class="string">--&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/dist/Aplayer.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/dist/Meting.min.js&quot;&gt;&lt;/script&gt;</span>           <span class="string">&lt;!--</span> <span class="string">MetingJS</span> <span class="string">放这里</span> <span class="string">--&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;meting-js</span> <span class="string">server=&quot;netease&quot;</span> <span class="string">type=&quot;playlist&quot;</span> <span class="string">id=&quot;14328758050&quot;</span> <span class="string">fixed=&quot;true&quot;</span> <span class="string">autoplay=&quot;true&quot;</span> <span class="string">theme=&quot;#ad7a86&quot;&gt;&lt;/meting-js&gt;</span></span><br></pre></td></tr></table></figure><p>这里的id就是歌单id</p><h2 id="添加分类磁贴"><a href="#添加分类磁贴" class="headerlink" title="添加分类磁贴"></a>添加分类磁贴</h2><p>&#x3D;&#x3D;关键：hexo采用6.3版本&#x3D;&#x3D;</p><ol><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-categories-card --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-categories-card</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/a9131002/</span></span><br><span class="line"><span class="attr">categoryBar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">column:</span> <span class="string">odd</span> <span class="comment"># odd：3列 | even：4列</span></span><br><span class="line">  <span class="attr">row:</span> <span class="number">1</span> <span class="comment">#显示行数，默认两行，超过行数切换为滚动显示</span></span><br><span class="line">  <span class="attr">message:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">Ubuntu指南</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/akilar-candyassets/image/cover1.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">玩转Win10</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/akilar-candyassets/image/cover2.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">长篇小说连载</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/akilar-candyassets/image/cover3.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">个人日记</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/akilar-candyassets/image/cover4.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">诗词歌赋</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/akilar-candyassets/image/cover5.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">杂谈教程</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/akilar-candyassets/image/cover6.webp</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-categories-card@1.0.0/lib/categorybar.css</span></span><br></pre></td></tr></table></figure><ol start="3"><li>参数释义</li></ol><table><thead><tr><th align="left">参数</th><th align="left">备选值&#x2F;类型</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">priority</td><td align="left">number</td><td align="left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td align="left">enable</td><td align="left">true&#x2F;false</td><td align="left">【必选】控制开关</td></tr><tr><td align="left">enable_page</td><td align="left">path&#x2F;all</td><td align="left">【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’&#x2F;‘,分类页面就填’&#x2F;categories&#x2F;‘。若要应用于所有页面，就填’all’，默认为’&#x2F;‘</td></tr><tr><td align="left">layout.type</td><td align="left">id&#x2F;class</td><td align="left">【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td align="left">layout.name</td><td align="left">text</td><td align="left">【必选】挂载容器名称</td></tr><tr><td align="left">layout.index</td><td align="left">0和正整数</td><td align="left">【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td align="left">column</td><td align="left">odd&#x2F;even</td><td align="left">【可选】显示列数，考虑到比例问题，只提供3列和4列，odd为3列， even为4列</td></tr><tr><td align="left">row</td><td align="left">number</td><td align="left">【可选】显示行数，默认两行，超过行数切换为滚动显示</td></tr><tr><td align="left">message.descr</td><td align="left">text</td><td align="left">分类描述,需要和你自己的文章分类一一对应。</td></tr><tr><td align="left">message.cover</td><td align="left">url</td><td align="left">分类背景,需要和你自己的文章分类一一对应。</td></tr><tr><td align="left">custom_css</td><td align="left">url</td><td align="left">【可选】自定义样式，会替换默认的css链接，可以下载文档给出的cdn链接后自主修改</td></tr></tbody></table></li></ol><p>参考链接<a href="https://akilar.top/posts/a9131002/">https://akilar.top/posts/a9131002/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop基础</title>
      <link href="/2025/09/18/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/Hadoop/"/>
      <url>/2025/09/18/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/Hadoop/</url>
      
        <content type="html"><![CDATA[<p>用 Java 语言实现，允许用户使用简单的编程模型实现分布式处理</p><h4 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h4><ul><li>HDFS 分布式文件存储系统  ：解决海量数据存储</li><li>YARN 集群资源管理和任务调度框架：解决资源任务调度，支持各种计算引擎运行</li><li>MapReduce 分布式计算框架：解决海量数据计算</li></ul><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011131457444.png" alt="image-20251011131457277"></p><h4 id="特性优点"><a href="#特性优点" class="headerlink" title="特性优点"></a>特性优点</h4><p>通用性：与具体的业务脱钩</p><p>简单：编程模型使用简单</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011131544767.png" alt="image-20251011131544659"></p><h4 id="架构变化"><a href="#架构变化" class="headerlink" title="架构变化"></a>架构变化</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011131903702.png" alt="image-20251011131903598"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011131923515.png" alt="image-20251011131923408"></p><h3 id="Hadoop-集群"><a href="#Hadoop-集群" class="headerlink" title="Hadoop 集群"></a>Hadoop 集群</h3><ol><li>包括两个集群：HDFS 集群、YARN 集群</li><li>两个集群 <font style="color:#DF2A3F;"> 逻辑上分离，物理上在一起 </font></li><li>两个集群都是标准的主从架构集群</li></ol><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011131947459.png" alt="image-20251011131947359"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132012270.png" alt="image-20251011132012168"></p><p>MapReduce 是计算框架、代码层面的组件，没有集群之说</p><h4 id="Hadoop-集群安装"><a href="#Hadoop-集群安装" class="headerlink" title="Hadoop 集群安装"></a>Hadoop 集群安装</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132025885.png" alt="image-20251011132025774"></p><h4 id="集群组成介绍"><a href="#集群组成介绍" class="headerlink" title="集群组成介绍"></a>集群组成介绍</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132044254.png" alt="image-20251011132044140"></p><h4 id="基础环境设置"><a href="#基础环境设置" class="headerlink" title="基础环境设置"></a>基础环境设置</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132057259.png" alt="image-20251011132057132"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132111187.png"> <img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132123402.png" alt="image-20251011132123271"></p><h4 id="安装包结构"><a href="#安装包结构" class="headerlink" title="安装包结构"></a>安装包结构</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132136840.png" alt="image-20251011132136729"></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132150607.png" alt="image-20251011132150525"></p><h4 id="format-初始化"><a href="#format-初始化" class="headerlink" title="format 初始化"></a>format 初始化</h4><p>首次启动 HDFS 时，必须进行初始化操作</p><p>format 本质上是初始化工作，进行 HDFS 清理和准备工作</p><p><code>hdfs namenode -format</code></p><h4 id="集群启停命令"><a href="#集群启停命令" class="headerlink" title="集群启停命令"></a>集群启停命令</h4><h5 id="1-手动逐个进程启停"><a href="#1-手动逐个进程启停" class="headerlink" title="1.手动逐个进程启停"></a>1.手动逐个进程启停</h5><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132205149.png" alt="image-20251011132205066"></p><h5 id="2-一键启停"><a href="#2-一键启停" class="headerlink" title="2.一键启停"></a>2.一键启停</h5><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132217685.png" alt="image-20251011132217602"></p><h5 id="3-进程状态、日志查看"><a href="#3-进程状态、日志查看" class="headerlink" title="3.进程状态、日志查看"></a>3.进程状态、日志查看</h5><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132229139.png" alt="image-20251011132229007"></p><h4 id="4-web-页面"><a href="#4-web-页面" class="headerlink" title="4.web 页面"></a>4.web 页面</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132247696.png" alt="image-20251011132247580"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132314024.png" alt="image-20251011132313925"></p><h4 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132334243.png" alt="image-20251011132334111"></p><ol><li>HDFS 本质上就是一个文件系统</li><li>有目录树结构，和 linux 类似</li></ol><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132350130.png" alt="image-20251011132350009"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132359474.png" alt="image-20251011132359399"></p><h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><h4 id="传统文件系统"><a href="#传统文件系统" class="headerlink" title="传统文件系统"></a>传统文件系统</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132413942.png" alt="image-20251011132413809"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132424733.png" alt="image-20251011132424640"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132435014.png" alt="image-20251011132434924"></p><p>传统的文件存储系统问题：</p><ol><li>成本高</li><li>效率低：传统存储当需要处理数据的时候把数据移动过来，</li><li>性能低</li><li>可扩展性差</li></ol><h4 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132449301.png" alt="image-20251011132449196"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132520033.png" alt="image-20251011132519911"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132646502.png"> <img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132634050.png" alt="image-20251011132633890"></p><h4 id="HDFS-1"><a href="#HDFS-1" class="headerlink" title="HDFS"></a>HDFS</h4><p>hadoop 分布式文件系统</p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132727454.png" alt="image-20251011132727327"></p><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132744166.png"> <img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132754683.png" alt="image-20251011132754547"></p><h5 id="重要特性"><a href="#重要特性" class="headerlink" title="重要特性"></a>重要特性</h5><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132834207.png" alt="image-20251011132834077"></p><h6 id="主从架构"><a href="#主从架构" class="headerlink" title="主从架构"></a>主从架构</h6><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132851687.png" alt="image-20251011132851566"></p><h6 id="分块存储"><a href="#分块存储" class="headerlink" title="分块存储"></a>分块存储</h6><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132902205.png" alt="image-20251011132902065"></p><h6 id="副本机制"><a href="#副本机制" class="headerlink" title="副本机制"></a>副本机制</h6><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132914372.png" alt="1"></p><h6 id="元数据管理"><a href="#元数据管理" class="headerlink" title="元数据管理"></a>元数据管理</h6><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132932669.png" alt="image-20251011132932561"></p><h6 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h6><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011132950445.png" alt="image-20251011132950346"></p><h6 id="数据块存储"><a href="#数据块存储" class="headerlink" title="数据块存储"></a>数据块存储</h6><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011133002998.png" alt="image-20251011133002903"></p><h4 id="HDFS-shell-操作"><a href="#HDFS-shell-操作" class="headerlink" title="HDFS shell 操作"></a>HDFS shell 操作</h4><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011133024691.png" alt="image-20251011133024586"></p><h5 id="文件系统协议"><a href="#文件系统协议" class="headerlink" title="文件系统协议"></a>文件系统协议</h5><p><img src="https://wh-hexo-blog.oss-cn-guangzhou.aliyuncs.com/20251011133035653.png" alt="image-20251011133035524"></p><h5 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757667997442-100aa96a-cd20-41f7-8e77-f2fb8896d045.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757668005344-9df18a1e-21da-4595-811d-f07ebce717cc.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757668041995-097bab36-3629-4ab8-b19d-ec566e451e19.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757669448780-6368ec15-8313-4682-8f46-ef83784cb7cd.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757669468069-4b820980-232a-4f2a-8917-98566cd0aa72.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757669586070-11f1b3c4-2cbf-43b5-8f77-e799da24db60.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757669595505-cafeb3b4-6c19-4120-ac38-6297998c1083.png"></p><h4 id="HDFS-工作流程和机制"><a href="#HDFS-工作流程和机制" class="headerlink" title="HDFS 工作流程和机制"></a>HDFS 工作流程和机制</h4><h5 id="集群角色和职责"><a href="#集群角色和职责" class="headerlink" title="集群角色和职责"></a>集群角色和职责</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757669773173-f079a259-8bb8-465d-913f-66be4a68e26e.png"></p><h6 id="主角色：namenode"><a href="#主角色：namenode" class="headerlink" title="主角色：namenode"></a>主角色：namenode</h6><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757669824218-cfb41e33-740c-45ed-a06e-2925b8e1b4f5.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757669854166-927da354-1533-47ec-b30e-18f815de3ed2.png"></p><h6 id="从角色：datanode"><a href="#从角色：datanode" class="headerlink" title="从角色：datanode"></a>从角色：datanode</h6><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757669876821-f9b0584b-f215-4ca0-9976-861dec367efa.png"></p><h6 id="主角色辅助角色：secondarynamenode"><a href="#主角色辅助角色：secondarynamenode" class="headerlink" title="主角色辅助角色：secondarynamenode"></a>主角色辅助角色：secondarynamenode</h6><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757669916209-c5d0b588-2d98-42b0-ab39-bd6b8075d108.png"></p><h6 id="namenode-职责"><a href="#namenode-职责" class="headerlink" title="namenode 职责"></a>namenode 职责</h6><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757669968627-d0f6a7b6-95d8-4c51-a344-094353365d94.png"></p><h6 id="datanode-职责"><a href="#datanode-职责" class="headerlink" title="datanode 职责"></a>datanode 职责</h6><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757670014143-8fe69806-f714-4cf4-8fe0-1babeedcd4cf.png"></p><h5 id="写数据流程（上传文件流程）"><a href="#写数据流程（上传文件流程）" class="headerlink" title="写数据流程（上传文件流程）"></a>写数据流程（上传文件流程）</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757670060297-19c2bb3f-c2cb-4b54-ac2e-64f093ce50c4.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757670340518-25b6db35-e781-405a-bb7e-784f5b8c5916.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757670379903-afdb3cbb-58e8-40f6-a8eb-6160d7eaa32b.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757670416947-788c9974-db51-47c8-929e-5b38333afc7e.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757670422377-ab5c901e-721d-4528-8964-bcf4be82dabe.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757670464401-3d7f26b2-cffd-4a27-b05f-7c7763e88687.png"></p><h6 id="核心概念–Pipeline-管道"><a href="#核心概念–Pipeline-管道" class="headerlink" title="核心概念–Pipeline 管道"></a>核心概念–Pipeline 管道</h6><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757670143113-27e81cee-b2e8-4e86-b2c8-379148d7300b.png"></p><h6 id="核心概念–ACK-应答校验"><a href="#核心概念–ACK-应答校验" class="headerlink" title="核心概念–ACK 应答校验"></a>核心概念–ACK 应答校验</h6><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757670217845-8baf07e1-239d-47e9-a6c0-100055072b08.png"></p><h6 id="核心概念–默认-3-副本存储策略"><a href="#核心概念–默认-3-副本存储策略" class="headerlink" title="核心概念–默认 3 副本存储策略"></a>核心概念–默认 3 副本存储策略</h6><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757670271501-59817feb-9c59-4649-8baf-6aa6fe6e088e.png"></p><h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><p>分而治之、设计构思、官方示例、执行流程</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757677638080-cfe9dc7e-66e8-430c-a7d1-ca56f24d459b.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757678108519-324b22e5-cb16-497b-a3f4-db357dc97b64.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757678389673-08baecab-9cf5-4545-9acf-8383135b32a5.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757678474341-500fe20b-7cb1-48da-9096-36b97e51bdf0.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757678488922-ec386f60-ce09-45f3-94fc-b4ab545918be.png"></p><h4 id="分布式计算概念"><a href="#分布式计算概念" class="headerlink" title="分布式计算概念"></a>分布式计算概念</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757678776519-33fa69ae-c32f-48ed-a34b-df4920209278.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757678823310-3315b910-565e-4e89-822e-6c67f442a15d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757678984159-71adf08f-df0b-4359-bc3e-91030734ae34.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757679092503-017e4013-081e-4d88-8ced-39a85897706e.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757679102541-1e68c075-d216-4b51-997f-1169135a5498.png"></p><h4 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757679315491-3a74874c-1fe3-436a-a127-bffac812afda.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757679326178-3d25ffa7-b00c-4b40-a32a-bc50cafb22d8.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757679401723-f05c5911-9198-4536-a023-ac9569ae316e.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757679595690-57e89123-1573-497a-accf-e7324ef59cf1.png"></p><ul><li>map 阶段的核心：把输入的数据经过切割</li><li>shuffle 阶段：排序分组</li><li>reduce：合并数据</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757679816368-d5cc4bfe-b354-446c-b0b1-7bf2559267fd.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757679698228-7afa7aa1-5079-423e-85b7-bd0f7c9e2e31.png"></p><h4 id="Map-阶段流程"><a href="#Map-阶段流程" class="headerlink" title="Map 阶段流程"></a>Map 阶段流程</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757680033797-8e303e14-048d-469b-a4a3-9a8014cd8195.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757680201656-6ce94e14-6a22-459d-9fd5-c17831256a58.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757680377041-58e463b9-2267-457f-868b-dd7f97440dd4.png"></p><h4 id="Reduce-阶段流程"><a href="#Reduce-阶段流程" class="headerlink" title="Reduce 阶段流程"></a>Reduce 阶段流程</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757680673021-5a13ea9e-12bc-47ad-ae91-a3bd000a1b4a.png"></p><h4 id="shuffle-概念"><a href="#shuffle-概念" class="headerlink" title="shuffle 概念"></a>shuffle 概念</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757680814453-30d3156c-8d52-41f8-b934-d2148f4180bd.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757680894896-6514ee56-880d-4d97-be0c-2a4c1b7655cb.png"></p><h3 id="YARN-功能与架构组件"><a href="#YARN-功能与架构组件" class="headerlink" title="YARN 功能与架构组件"></a>YARN 功能与架构组件</h3><p>YARN 是一个通用资源管理系统和调度平台</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757681802995-c4f7c7e6-70c4-4895-8250-f30dfa462af1.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757682024734-844dba11-5ac7-437e-aad7-03c5fb9fe941.png"></p><h4 id="架构、组件"><a href="#架构、组件" class="headerlink" title="架构、组件"></a>架构、组件</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757682076350-891b6ec0-a415-450b-aaf2-91426e6e25ac.png"></p><p>YARN3 大组件</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757682097182-47901e02-b86a-445c-8467-11e3c12b4ed5.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757682176321-23971900-b8f8-49cc-af75-df107cf30688.png"></p><p>核心交互流程</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757739347281-a3e96791-bab0-4a92-bea3-18805b2d7b4f.png"></p><p>整体概述</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757739393763-5c40bcdc-58e3-478c-a241-08c6740c59f2.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757739452748-917306a2-5362-4d06-b2d8-f1a88a4a5060.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757739488546-82c396c6-1c99-4f19-a979-31650ac4f21c.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757739569966-c4f29712-6f21-40fb-957d-1607977de368.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757739584049-279260aa-8ead-4783-ad69-696e7bd3653d.png"></p><h4 id="YARN-中的资源调度器"><a href="#YARN-中的资源调度器" class="headerlink" title="YARN 中的资源调度器"></a>YARN 中的资源调度器</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757739671470-5e030ff0-868c-487c-85bc-a6b60aaa2b7b.png"></h4><p>在 YARN 中，负责给应用分配资源的就是 schedule，是 ResourceManager 的核心组件之一。Scheduler 完全用于调度作业</p><h5 id="调度器策略"><a href="#调度器策略" class="headerlink" title="调度器策略"></a>调度器策略</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757739766231-828d620e-9a9d-4a67-a623-04a71f94e7c2.png"></p><h6 id="容量调度器"><a href="#容量调度器" class="headerlink" title="容量调度器"></a>容量调度器</h6><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757739846996-5490e4cd-e499-4770-9ed9-216d3eac12ef.png"></p><h6 id="公平调度"><a href="#公平调度" class="headerlink" title="公平调度"></a>公平调度</h6><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757739927080-e75d5d5d-df92-4140-84e4-0917dc99a515.png"></p><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><h4 id="数据仓库基本概念"><a href="#数据仓库基本概念" class="headerlink" title="数据仓库基本概念"></a>数据仓库基本概念</h4><p>一个用于存储、分析、报告的数据系统</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757740216337-f7f226a6-7742-4805-b792-865fe8287665.png"></p><p><font style="background-color:#FBDE28;"> 数据仓库：为了分析数据而来，分析结果给企业决策提供支持 </font></p><p>（1）业务数据的存储问题</p><p>存储在数据库中</p><p>（2）分析型决策的制定</p><p>基于业务数据开展数据分析，基于分析的结果给决策提供支持，这就是所谓的数据驱动决策</p><p>（3）数据库可以开展分析吗？</p><p>可以，但是读取压力大、数据分散在不同系统不同表中有差异</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757740602655-2d2be5fd-a5b0-46f3-87c0-3dc91ffd58cf.png"></p><h5 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757740657897-c9ecff24-62b3-4e83-9045-0e9ef481b108.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757740735602-aaf9d06c-d8f6-441a-9174-f1b6aaa68d92.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757740743181-894014f4-958c-44e2-9c21-cb74100556a1.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757740786315-4d6b52ef-0600-4091-9388-3e2f008770b2.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757740814742-466e69b9-eaa3-4565-822f-53ab5c817562.png"> <img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757740885244-cf464d5e-3e26-4d19-8744-772cb41f8582.png"></p><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757740982737-90b73da5-7468-40bb-8319-6e155eb42203.png"></p><h5 id="Hive-和-Hadoop-关系"><a href="#Hive-和-Hadoop-关系" class="headerlink" title="Hive 和 Hadoop 关系"></a>Hive 和 Hadoop 关系</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757741121357-d0ae12a1-b057-42d3-95d4-030a7a793679.png"></p><h5 id="Hive-功能模拟实现"><a href="#Hive-功能模拟实现" class="headerlink" title="Hive 功能模拟实现"></a>Hive 功能模拟实现</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757741231021-b2a32020-fbf0-4fd3-a5f2-4b14a7e5a5c0.png"></p><ol><li>Hive 能将数据文件映射成为一张表，这个 <font style="color:#DF2A3F;"> 映射 </font> 指什么？</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757741351995-b6733584-d932-4768-81d0-16d92dbc8d99.png"></p><p>文件和表的对应关系</p><ol start="2"><li>Hive 软件本身到底承担了什么功能职责</li></ol><p>SQL 语法编译成 MapReduce</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757741586354-f727c54a-b4b3-461b-8b08-d36961b2c766.png"></p><h5 id="Hive-架构"><a href="#Hive-架构" class="headerlink" title="Hive 架构"></a>Hive 架构</h5><ul><li>用户接口，包括 Cli 等</li><li>元信息存储</li><li><font style="color:#DF2A3F;"> Driver 驱动程序，包括语法解析器、计划编译器、优化器、执行器 </font></li><li>执行引擎</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757741702926-9d3effc8-928c-4248-91c4-2958e44aa8c1.png"></p><h4 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h4><h5 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757742471066-1db5dd9e-2784-46d9-bf10-416b3afda75f.png"></p><h5 id="Hive-Metadata"><a href="#Hive-Metadata" class="headerlink" title="Hive Metadata"></a>Hive Metadata</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757742490254-e8b5b498-649f-4246-ad10-77427ab4df97.png"></p><h5 id="Hive-Metastore"><a href="#Hive-Metastore" class="headerlink" title="Hive Metastore"></a>Hive Metastore</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757742509317-acd1942b-1a50-4d1e-b221-441c5a89d309.png"></p><h5 id="Metasotre-配置方式"><a href="#Metasotre-配置方式" class="headerlink" title="Metasotre 配置方式"></a>Metasotre 配置方式</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757742584785-a1099fe8-4f3e-4755-92c7-c49a69bb3985.png"></p><h5 id="远程模式"><a href="#远程模式" class="headerlink" title="远程模式"></a>远程模式</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757742641455-6d82d79b-058a-49c2-a94f-5085fe4d070c.png"></p><h3 id="陌陌聊天案例实现"><a href="#陌陌聊天案例实现" class="headerlink" title="陌陌聊天案例实现"></a>陌陌聊天案例实现</h3><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757745482616-c736ec86-b17a-4752-aeeb-1a49a1218863.png"></p><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757745462035-c257631f-478c-4dce-9800-885173f7395a.png"></p><h4 id="数据内容"><a href="#数据内容" class="headerlink" title="数据内容"></a>数据内容</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757745509472-6ebfeecc-f299-4b8d-95f2-11eea8ac5547.png"></p><h4 id="基于-Hive-实现需求开发"><a href="#基于-Hive-实现需求开发" class="headerlink" title="基于 Hive 实现需求开发"></a>基于 Hive 实现需求开发</h4><h5 id="建库建表"><a href="#建库建表" class="headerlink" title="建库建表"></a>建库建表</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757745617000-098d9d99-35be-4aa5-900d-18f6c4f686d8.png"></p><h5 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757745665026-243bc36a-b834-4165-a16b-0275e7aead3d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757745700501-6e3fb49d-03fc-46d7-b372-3612cd644a39.png"></p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757745709552-1d5447f5-80df-49d1-97d5-4a1fec8eb575.png"></p><h5 id="ETL-数据清洗"><a href="#ETL-数据清洗" class="headerlink" title="ETL 数据清洗"></a>ETL 数据清洗</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757745792292-cbc40d6f-c847-474d-aafa-4e0fd4a49369.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757745813752-fcdfc502-6306-4b9e-bf52-8c93d50fe213.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757745907887-5e7a700a-9d90-4604-84d5-3073db3110d8.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757745976296-3eaa056c-0dc2-407a-ab77-7a7688925e2e.png"></p><h4 id="指标计算"><a href="#指标计算" class="headerlink" title="指标计算"></a>指标计算</h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757746406744-62dfd706-2d88-4097-bfa8-c66023204b7d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757746465646-97a09c20-cb9c-4b24-a105-595881636340.png"></p><h5 id="指标-1：统计今日消息总量"><a href="#指标-1：统计今日消息总量" class="headerlink" title="指标 1：统计今日消息总量"></a>指标 1：统计今日消息总量</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757746625622-d3d7c136-ca83-47f3-a3f9-c41a48bf9dda.png"></p><h5 id="指标-2：统计每小时消息量、发送和接收用户数"><a href="#指标-2：统计每小时消息量、发送和接收用户数" class="headerlink" title="指标 2：统计每小时消息量、发送和接收用户数"></a>指标 2：统计每小时消息量、发送和接收用户数</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757746700058-248fe25c-c75d-4146-b3be-16e311ae3a9b.png"></p><h5 id="指标-3：统计今日各地区发送消息总量"><a href="#指标-3：统计今日各地区发送消息总量" class="headerlink" title="指标 3：统计今日各地区发送消息总量"></a>指标 3：统计今日各地区发送消息总量</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757746879522-779a2ada-e372-45df-ac37-f4aa00521f7a.png"></p><p>::: color1<br>group by 语法限制，出现在 select 当中的字段要么是分组的字段，要么是被聚合函数应用的字段</p><p>:::</p><h5 id="指标-4：统计今日发送和接收用户人数"><a href="#指标-4：统计今日发送和接收用户人数" class="headerlink" title="指标 4：统计今日发送和接收用户人数"></a>指标 4：统计今日发送和接收用户人数</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757747208116-3a17f33b-42a3-43db-9612-9f069823cb09.png"></p><h5 id="指标-5：统计今日发送消息最多的用户-top10"><a href="#指标-5：统计今日发送消息最多的用户-top10" class="headerlink" title="指标 5：统计今日发送消息最多的用户 top10"></a>指标 5：统计今日发送消息最多的用户 top10</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757747290374-7a34c6a0-2b16-4ef3-8e91-e2a4c089a0c9.png"></p><h5 id="指标-6：统计今日接收消息最多的用户-top10"><a href="#指标-6：统计今日接收消息最多的用户-top10" class="headerlink" title="指标 6：统计今日接收消息最多的用户 top10"></a>指标 6：统计今日接收消息最多的用户 top10</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757747331799-726765e9-1a16-4729-b97c-4ac11da87adc.png"></p><h5 id="指标-7：统计发送人的手机型号发布情况"><a href="#指标-7：统计发送人的手机型号发布情况" class="headerlink" title="指标 7：统计发送人的手机型号发布情况"></a>指标 7：统计发送人的手机型号发布情况</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757747419607-b2d17243-28ad-4187-ba42-73db7ca18ad5.png"></p><h5 id="指标-8：统计发送人的操作系统发布情况"><a href="#指标-8：统计发送人的操作系统发布情况" class="headerlink" title="指标 8：统计发送人的操作系统发布情况"></a>指标 8：统计发送人的操作系统发布情况</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757747467647-14ca8b6a-947e-496c-8843-1f9031e1a1b7.png"></p><h4 id="基于-FinelBI-实现可视化报表"><a href="#基于-FinelBI-实现可视化报表" class="headerlink" title="基于 FinelBI 实现可视化报表"></a>基于 FinelBI 实现可视化报表</h4><h5 id="介绍与安装"><a href="#介绍与安装" class="headerlink" title="介绍与安装"></a>介绍与安装</h5><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757747635714-bb7047b3-91d6-46d7-ad39-72882345f956.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42495862/1757747652520-fcb30f99-b66b-479d-8b3a-ac9223c966b6.png"></p><h5 id="配置数据源及数据准备"><a href="#配置数据源及数据准备" class="headerlink" title="配置数据源及数据准备"></a>配置数据源及数据准备</h5><h5 id="构建可视化报表"><a href="#构建可视化报表" class="headerlink" title="构建可视化报表"></a>构建可视化报表</h5>]]></content>
      
      
      <categories>
          
          <category> 随便写写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
